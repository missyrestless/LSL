string CONFIG_CARD = "Configuration";
integer channel = 0;
integer side = ALL_SIDES; 
integer rotate = 0;
float angle = 0.0;
integer NotecardLine;
key QueryID;
integer numlist = 0;
list Textures_1;
list Textures_2;
list Textures_3;
list Names_1;
list Names_2;
list Names_3;
list Trans_Opts;
list Main_Menu;
list Face;
list GetFace;
integer handle;
integer list1Length;
integer list2Length;
integer list3Length;
integer numsides;
integer Length;
integer Page = 1;
integer facenum = -2;
integer delay = 0;
integer counter = 0;
string t_save = "";
string axis = "z";
vector prim_size;
vector prim_pos;
myDialog(key m_id, string msg, list btns)
{
    llDialog(m_id, "Primp! - Restless Studio Prim Configuration\nWritten by Missy Restless\n" + (string)msg, btns, channel);
}
showSlide()
{
    string slide_uuid;
    while ((slide_uuid = llList2String(Textures_1 + Textures_2 + Textures_3, numlist)) == "")
    {
        numlist++;
        if (numlist >= list1Length + list1Length)
            numlist = 0;
    }
    llSetTexture(llList2String(Textures_1 + Textures_2 + Textures_3, numlist), side);
    numlist++;
    if (numlist >= list1Length + list1Length)
        numlist = 0;
}
initLists()
{
    float  x_prim;
    float  y_prim;
    float  z_prim;
    list1Length = llGetListLength(Textures_1);
    list2Length = llGetListLength(Textures_2);
    list3Length = llGetListLength(Textures_3);
    prim_size = llGetScale();
    prim_pos = llGetPos();
    x_prim = prim_size.x;
    y_prim = prim_size.y;
    z_prim = prim_size.z;
    Main_Menu = [ "Shape", "Glow", "Properties" ];
    t_save = llGetTexture(0);
    if (t_save == NULL_KEY)
    {
        t_save = "";
        Main_Menu = Main_Menu + ["-"];
    }
    else
    {
        Main_Menu = Main_Menu + ["Get Face #"];
    }
    Main_Menu = Main_Menu + [ "Rotate", "Set Face #",
                  "Textures", "Reset", "Transparent" ];
    if ((x_prim <= 10.0) && (y_prim <= 10.0) && (z_prim <= 10.0))
    {
        Main_Menu = Main_Menu + ["Size"];
        Main_Menu = Main_Menu + ["Exit"];
        Main_Menu = Main_Menu + ["Position"];
    }
    else
    {
        Main_Menu = Main_Menu + ["-"];
        Main_Menu = Main_Menu + ["Exit"];
        Main_Menu = Main_Menu + ["-"];
    }
    Names_1 = ["Page 2"] + Names_1;
    Names_2 = ["Page 3"] + Names_2;
    Names_3 = ["Page 1"] + Names_3;
    Textures_1 = [""] + Textures_1;
    Textures_2 = [""] + Textures_2;
    Textures_3 = [""] + Textures_3;
}
default
{
    state_entry()
    {
        integer i;
        llOwnerSay("Initializing... please wait");
        Textures_1 = ["", "", ""];
        Textures_2 = ["", "", ""];
        Textures_3 = ["", "", ""];
        Names_1 = ["Slide Show", "Main Menu", "Media"];
        Names_2 = ["Slide Show", "Main Menu", "Media"];
        Names_3 = ["Slide Show", "Main Menu", "Media"];
        Trans_Opts = [ "All", "Main Menu", "Opacity" ];
        Face = [ "All Sides", "Main Menu", "Textures" ];
        GetFace = [ "Done" ];
        numsides = llGetNumberOfSides();
        if (numsides > 9)
            numsides = 9;
        for (i = 0; i < numsides; i++)
        {
            Trans_Opts = ["Face " + (string)i] + Trans_Opts;
            Face = [(string)i] + Face;
            if (i == 0)
                GetFace = GetFace + ["Locate " + (string)i];
            else
                GetFace = ["Locate " + (string)i] + GetFace;
        }
        if ((numsides < 9) && (((numsides + 3) % 3) != 0))
        {
            for (i = 0; i < 3 - ((numsides + 3) % 3); i++)
            {
                Trans_Opts = ["-"] + Trans_Opts;
                Face = ["-"] + Face;
            }
        }
        if ((numsides < 9) && (((numsides + 1) % 3) != 0))
        {
            for (i = 0; i < 3 - ((numsides + 1) % 3); i++)
            {
                GetFace = ["-"] + GetFace;
            }
        }
        if (llGetInventoryType(CONFIG_CARD) == INVENTORY_NOTECARD)
        {
            NotecardLine = 0;
            numlist = 0;
            QueryID = llGetNotecardLine( CONFIG_CARD, NotecardLine );
        }
        else
        {
            llOwnerSay("Configuration notecard missing, using defaults.");
            Names_1 = ["Horseshoe Pk"] + Names_1;
            Names_1 = ["-"] + Names_1;
            Names_2 = ["Russell Flls"] + Names_2;
            Names_2 = ["-"] + Names_2;
            Names_3 = ["Liles Falls"] + Names_3;
            Names_3 = ["-"] + Names_3;
            Textures_1 = ["5ced634a-ed53-d1d3-d391-bb898d1706a4"] + Textures_1;
            Textures_1 = [""] + Textures_1;
            Textures_2 = ["6a52febf-32c8-09fc-45b3-e0026d4ed151"] + Textures_2;
            Textures_2 = [""] + Textures_2;
            Textures_3 = ["0c843cc8-524a-f81e-b8b0-4bf4a2ce213f"] + Textures_3;
            Textures_3 = [""] + Textures_3;
            initLists();
            state Running;
        }
    }
    dataserver( key queryid, string data )
    {
        list temp;
        string name;
        string value;
        if ( queryid == QueryID )
        {
            if ( data != EOF )
            {
                if (data == "END_SETTINGS")
                {
                    initLists();
                    state Running;
                }
                if ( llGetSubString(data, 0, 0) != "#" && llStringTrim(data, STRING_TRIM) != "" )
                {
                    temp = llParseString2List(data, ["="], []);
                    name = llStringTrim(llList2String(temp, 0), STRING_TRIM);
                    value = llStringTrim(llList2String(temp, 1), STRING_TRIM);
                    if ( name == "channel" )
                    {
                        channel = (integer)value;
                    }
                    else if ( name == "side" )
                    {
                        side = (integer)value;
                    }
                    else if ( name == "rotate" )
                    {
                        rotate = (integer)value;
                    }
                    else if ( name == "angle" )
                    {
                        angle = (float)value;
                    }
                    else
                    {
                      if (numlist < 8)
                      {
                        Names_1 = [name] + Names_1;
                        Textures_1 = [value] + Textures_1;
                      }
                      else if (numlist < 16)
                      {
                        Names_2 = [name] + Names_2;
                        Textures_2 = [value] + Textures_2;
                      }
                      else if (numlist < 24)
                      {
                        Names_3 = [name] + Names_3;
                        Textures_3 = [value] + Textures_3;
                      }
                      numlist++;
                    }
                }
                NotecardLine++;
                QueryID = llGetNotecardLine( CONFIG_CARD, NotecardLine );
            }
            else
            {
                initLists();
                state Running;
            }
        }
    }
    state_exit()
    {
        llOwnerSay("Initialization Complete!");
    }
}
state Running
{
    state_entry()
    {
        if (channel == 0)
            channel = ((integer)("0x"+llGetSubString((string)llGetKey(),-8,-1)) & 0x3FFFFFFF) ^ 0xBFFFFFFF;
        llListenRemove(handle);
        handle = llListen(channel, "", NULL_KEY, "");
        llSetTimerEvent(3600);
    }
    changed(integer change)
    {
        if ( change & CHANGED_INVENTORY )
        {
            llListenRemove(handle);
            channel = 0;
            state default;
        }
    }
    touch_start(integer total_number)
    {
        llListenRemove(handle);
        handle = llListen(channel, "", NULL_KEY, "");
        Length = list1Length;
        Page = 1;
        myDialog(llDetectedKey(0), "\nPimp Your Prim:", Main_Menu);
    }
    listen(integer channel, string name, key id, string message) 
    {
        integer i;
        integer bumpmap = 0;
        integer flexible = 0;
        integer shiny = 0;
        integer soft = 2;
        float alpha;
        float gravity = 0.3;
        float friction = 2.0;
        float wind = 0.0;
        float tension = 1.0;
        vector force = <0, 0, 0>;
        list params;
        list Landowner;
        list Media;
        list Set_Pos = [ "x", "y", "z",
                         "-1m", "-5m", "-10m",
                         "1m", "5m", "10m",
                         "20m", "Main Menu", "-20m" ];
        list Set_Size = [ "X", "Y", "Z",
                          "-1%", "-5%", "-10%",
                          "1%", "5%", "10%",
                          "20%", "Main Menu", "-20%" ];
        list Slide_Show = [ "30 sec", "60 sec", "90 sec",
                            "180 sec", "300 sec", "600 sec",
                            "900 sec", "1800 sec", "3600 sec",
                            "Slides ON", "Main Menu", "Slides OFF" ];
        list Brightness = [ "Bright ON", "Main Menu", "Bright OFF" ];
        list Phantom = [ "Phantom ON", "Main Menu", "Phantom OFF" ];
        list Properties = [ "Color", "Hole", "Flexible",
                            "Bump Map", "Shinyness", "Material",
                            "Brightness", "Main Menu", "Phantom" ];
        list Colors = [ "Indigo", "Violet", "Cyan",
                        "Yellow", "Purple", "Orange",
                        "Red", "Green", "Blue",
                        "Black", "Main Menu", "White" ];
        list Flexible_OFF = [ "-", "Properties", "-",
                          "Flexible ON", "Main Menu", "Flexible OFF" ];
        list Flexible_ON = [ "-", "Properties", "-",
                             "Wind", "Tension", "Force",
                             "Softness", "Gravity", "Friction",
                             "Flexible ON", "Main Menu", "Flexible OFF" ];
        list Hole = [ "Circle", "Square", "Triangle",
                      "0.10 Hollow", "0.25 Hollow", "0.4 Hollow",
                      "0.6 Hollow", "0.7 Hollow", "0.8 Hollow",
                      "Full Hole", "Main Menu", "No Hole" ];
        list Shiny = [ "Low", "Medium", "High",
                      "None", "Main Menu", "Properties" ];
        list Bump_1 = [ "None", "Bright", "Dark",
                        "Wood", "Bark", "Bricks",
                        "Checker", "Concrete", "Tile",
                        "More Bumps", "Main Menu", "Properties" ];
        list Bump_2 = [ "Stone", "Disks", "Gravel",
                        "Blobs", "Siding", "Large Tile",
                        "Stucco", "Suction", "Weave",
                        "Prev Bumps", "Main Menu", "Properties" ];
        list Softness = [ "Soft 1", "Soft 2", "Soft 3",
                           "Soft 0", "Main Menu", "Properties" ];
        list Materials = [ "Glass", "Metal", "Plastic",
                           "Wood", "Rubber", "Stone",
                           "Flesh", "Main Menu", "Properties" ];
        list Shape = [ "Prism", "Sphere", "Cylinder", "Torus", "Tube",
                       "Ring", "Box", "Main Menu", "Textures" ];
        list Angle = [ "45", "90", "135", "180", "225", "270",
                       "None", "Main Menu", "Textures" ];
        list Force = [  "<0., 0., 0.>", "<0., 0., 1.>", "<0., 1., 0.>",
                        "<1., 0., 0.>", "<1., 0., 1.>", "<1., 1., 0.>",
                        "<0., 1., 1.>", "Properties", "<1., 1., 1.>" ];
        list Friction = [  "0.0 F", "1.0 F", "2.0 F",
                           "3.0 F", "4.0 F", "5.0 F",
                           "6.0 F", "7.0 F", "8.0 F",
                           "9.0 F", "Properties", "10.0 F" ];
        list Gravity = [  "-10.0 G", "-8.0 G", "-6.0 G",
                          "-4.0 G", "-2.0 G", "0.0 G",
                          "2.0 G", "4.0 G", "6.0 G",
                          "8.0 G", "Properties", "10.0 G" ];
        list Tension = [  "0.0 T", "1.0 T", "2.0 T",
                           "3.0 T", "4.0 T", "5.0 T",
                           "6.0 T", "7.0 T", "8.0 T",
                           "9.0 T", "Properties", "10.0 T" ];
        list Wind = [  "0.0 W", "1.0 W", "2.0 W",
                           "3.0 W", "4.0 W", "5.0 W",
                           "6.0 W", "7.0 W", "8.0 W",
                           "9.0 W", "Properties", "10.0 W" ];
        list Glow = [  "0.0", "0.025", "0.050", "0.075", "0.1", "0.15",
                       "0.2", "0.3", "0.4", "0.7", "Main Menu", "1.0" ];
        list Trans_Level = [ "0.12", "0.25", "0.35",
                             "0.50", "0.62", "0.75",
                             "Invisible", "0.88", "Opaque",
                             "Back", "Main Menu", "Textures" ];
        list Exit_Opts = [ "Quit", "Main Menu", "Delete Script" ];
        if ((message == "Main Menu") || (message == "-"))
        {
            myDialog(id, "\nPimp Your Prim:", Main_Menu);
        }
        else if (message == "Textures")
        {
            Length = list1Length;
            Page = 1;
            myDialog(id, "\nSelect Texture (Page 1):", Names_1);
        }
        else if (message == "Properties")
        {
            myDialog(id, "\nPrim Properties:", Properties);
        }
        else if (llListFindList(Main_Menu, [message]) != -1)
        {
            if (message == "Shape")
            {
                myDialog(id, "\nPrim Shape:", Shape);
            }
            else if (message == "Get Face #")
            {
                myDialog(id, "Get Face Number:\nClicking face numbers below will\ncause the corresponding face to appear blank", GetFace);
            }
            else if (message == "Set Face #")
            {
                myDialog(id, "\nFace Settings:", Face);
            }
            else if (message == "Glow")
            {
                myDialog(id, "\nGlow Settings:", Glow);
            }
            else if (message == "Rotate")
            {
                myDialog(id, "\nRotate Settings:", Angle);
            }
            else if (message == "Properties")
            {
                myDialog(id, "\nPrim Properties:", Properties);
            }
            else if (message == "Position")
            {
                myDialog(id, "\nPrim Position:", Set_Pos);
            }
            else if (message == "Size")
            {
                myDialog(id, "\nPrim Size:", Set_Size);
            }
            else if (message == "Reset")
            {
                llListenRemove(handle);
                channel = 0;
                state default;
            }
            else if (message == "Transparent")
            {
                myDialog(id, "\nSelect Transparency:", Trans_Opts);
            }
            else if (message == "Exit")
            {
                myDialog(id, "\nYou are about to exit Primp!\nYou may also wish to delete the script if you have no further changes to make.", Exit_Opts);
            }
        }
        else if (llListFindList(Exit_Opts, [message]) != -1)
        {
            if (message == "Quit")
            {
                llListenRemove(handle);
            }
            else if (message == "Delete Script")
            {
                llListenRemove(handle);
                llRemoveInventory(llGetScriptName());
            }
        }
        else if (llListFindList(Trans_Level, [message]) != -1)
        {
            if (message == "Back")
            {
                myDialog(id, "\nSelect Transparency:", Trans_Opts);
            }
            else
            {
                if (message == "Invisible")
                {
                    alpha = 0.0;
                }
                else if (message == "Opaque")
                {
                    alpha = 1.0;
                }
                else
                {
                    alpha =(float)message; 
                }
                llSetAlpha(alpha, side);
                myDialog(id, "\nSelect Opacity Level:", Trans_Level);
            }
        }
        else if (llListFindList(Trans_Opts, [message]) != -1)
        {
            if (message == "Opacity")
            {
                myDialog(id, "\nSelect Opacity Level:", Trans_Level);
            }
            else
            {
                if (message == "All")
                {
                    llSetTexture(TEXTURE_TRANSPARENT, ALL_SIDES);
                }
                else
                {
                    llSetTexture(TEXTURE_TRANSPARENT, 
                                (integer)llGetSubString(message, 5, 5));
                }
                myDialog(id, "\nSelect Transparency:", Trans_Opts);
            }
        }
        else if (llListFindList(GetFace, [message]) != -1)
        {
            if ((t_save != "") && (facenum != -2))
            {
                llSetTexture(t_save, facenum);
                t_save = "";
                facenum = -2;
            }
            if (message == "Done")
            {
                myDialog(id, "\nPimp Your Prim:", Main_Menu);
            }
            else
            {
                facenum = (integer)llGetSubString(message, 7, 7);
                if ((facenum >= 0) && (facenum < numsides))
                {
                    t_save = llGetTexture(facenum);
                    if (t_save == NULL_KEY)
                    {
                        llSay(0, "This object must have full permissions to get the textures of faces.");
                        llSay(0,"To find an object's face number, select the face and press Ctrl-Alt-Shift-T");
                        t_save = "";
                        facenum = -2;
                        myDialog(id, "\nPimp Your Prim:", Main_Menu);
                    }
                    llSetTexture(TEXTURE_BLANK, facenum);
                }
                myDialog(id, "Get Face Number:\nClicking face numbers below will\ncause the corresponding face to appear blank", GetFace);
            }
        }
        else if (llListFindList(Face, [message]) != -1)
        {
            if (message == "All Sides")
            {
                side = ALL_SIDES;
            }
            else if (((integer)message >= 0) && ((integer)message < numsides))
            {
                side = (integer)message;
            }
            myDialog(id, "\nPimp Your Prim:", Main_Menu);
        }
        else if (llListFindList(Glow, [message]) != -1)
        {
                llSetPrimitiveParams( [ PRIM_GLOW, side, (float)message ] ) ; 
                myDialog(id, "\nPimp Your Prim:", Main_Menu);
        }
        else if (llListFindList(Set_Pos, [message]) != -1)
        {
            if ((message == "x") || (message == "y") || (message == "z"))
            {
                axis = (string)message;
            }
            else
            {
                i = (integer)llGetSubString(message, 0,
                                              llStringLength(message) - 2);
                if (axis == "x")
                {
                    prim_pos.x = prim_pos.x + i;
                }
                else if (axis == "y")
                {
                    prim_pos.y = prim_pos.y + i;
                }
                else if (axis == "z")
                {
                    prim_pos.z = prim_pos.z + i;
                }
                llSetPos(prim_pos);
            }
            myDialog(id, "\nPrim Position:", Set_Pos);
        }
        else if (llListFindList(Slide_Show, [message]) != -1)
        {
            if (message == "Slides ON")
            {
                if (delay == 0)
                    delay = 60;
                numlist = 0;
                showSlide();
                llSay(0, "Starting slide show");
            }
            else if (message == "Slides OFF")
            {
                if (delay)
                {
                    llSay(0, "Stopping slide show");
                    llSetTimerEvent(3600);
                }
                delay = 0;
            }
            else
            {
                delay = (integer)llGetSubString(message, 0,
                                              llStringLength(message) - 5);
            }
            if (delay)
            {
                llSetTimerEvent((float)delay);
                counter = delay;
                myDialog(id, "\nConfigure Slide Show:\nDelay currently = " + (string)delay + "\n\nSet delay and/or slide show on/off", Slide_Show);
            }
            else
            {
                myDialog(id, "\nPimp Your Prim:", Main_Menu);
            }
        }
        else if (llListFindList(Set_Size, [message]) != -1)
        {
            if ((message == "X") || (message == "Y") || (message == "Z"))
            {
                axis = llToLower((string)message);
            }
            else
            {
                alpha = (float)llGetSubString(message, 0,
                                              llStringLength(message) - 2);
                if (axis == "x")
                {
                    prim_size.x = 
                        prim_size.x + (prim_size.x * (alpha / 100.0));
                    if (prim_size.x > 10.0)
                        prim_size.x = 10.0;
                    if (prim_size.x < 0.1)
                        prim_size.x = 0.1;
                }
                else if (axis == "y")
                {
                    prim_size.y =
                        prim_size.y + (prim_size.y * (alpha / 100.0));
                    if (prim_size.y > 10.0)
                        prim_size.y = 10.0;
                    if (prim_size.y < 0.1)
                        prim_size.y = 0.1;
                }
                else if (axis == "z")
                {
                    prim_size.z =
                        prim_size.z + (prim_size.z * (alpha / 100.0));
                    if (prim_size.z > 10.0)
                        prim_size.z = 10.0;
                    if (prim_size.z < 0.1)
                        prim_size.z = 0.1;
                }
                llSetScale(prim_size);
            }
            myDialog(id, "\nPrim Size:", Set_Size);
        }
        else if (llListFindList(Properties, [message]) != -1)
        {
            if (message == "Brightness")
            {
                myDialog(id, "\nTurn brightness on/off:", Brightness);
            }
            else if (message == "Phantom")
            {
                myDialog(id, "\nTurn phantom on/off:", Phantom);
            }
            else if (message == "Bump Map")
            {
                myDialog(id, "\nSet bump map to use:", Bump_1);
            }
            else if (message == "Hole")
            {
                myDialog(id, "\nSet hole properties:", Hole);
            }
            else if (message == "Flexible")
            {
                if (flexible)
                    myDialog(id, "\nSet flexible properties:", Flexible_ON);
                else
                    myDialog(id, "\nSet flexible properties:", Flexible_OFF);
            }
            else if (message == "Shinyness")
            {
                myDialog(id, "\nSet shinyness level:", Shiny);
            }
            else if (message == "Color")
            {
                myDialog(id, "\nSet prim color:", Colors);
            }
            else if (message == "Material")
            {
                myDialog(id, "\nSet prim material:", Materials);
            }
        }
        else if (llListFindList(Brightness, [message]) != -1)
        {
            if (message == "Bright ON")
            {
                llSetPrimitiveParams([PRIM_FULLBRIGHT,ALL_SIDES,TRUE]);
            }
            else if (message == "Bright OFF")
            {
                llSetPrimitiveParams([PRIM_FULLBRIGHT,ALL_SIDES,FALSE]);
            }
            myDialog(id, "\nPrim Properties:", Properties);
        }
        else if (llListFindList(Shiny, [message]) != -1)
        {
            if (message == "None")
            {
                shiny = PRIM_SHINY_NONE;
            }
            else if (message == "Low")
            {
                shiny = PRIM_SHINY_LOW;
            }
            else if (message == "Medium")
            {
                shiny = PRIM_SHINY_MEDIUM;
            }
            else if (message == "High")
            {
                shiny = PRIM_SHINY_HIGH;
            }
            llSetPrimitiveParams([PRIM_BUMP_SHINY, side, shiny, bumpmap]);
            myDialog(id, "\nPrim Properties:", Properties);
        }
        else if (llListFindList(Bump_1, [message]) != -1)
        {
            if (message == "More Bumps")
            {
                bumpmap = -1;
                myDialog(id, "\nSet bump map to use:", Bump_2);
            }
            else if (message == "None")
            {
                bumpmap = PRIM_BUMP_NONE;
            }
            else if (message == "Bright")
            {
                bumpmap = PRIM_BUMP_BRIGHT;
            }
            else if (message == "Dark")
            {
                bumpmap = PRIM_BUMP_DARK;
            }
            else if (message == "Wood")
            {
                bumpmap = PRIM_BUMP_WOOD;
            }
            else if (message == "Bark")
            {
                bumpmap = PRIM_BUMP_BARK;
            }
            else if (message == "Bricks")
            {
                bumpmap = PRIM_BUMP_BRICKS;
            }
            else if (message == "Checker")
            {
                bumpmap = PRIM_BUMP_CHECKER;
            }
            else if (message == "Concrete")
            {
                bumpmap = PRIM_BUMP_CONCRETE;
            }
            else if (message == "Tile")
            {
                bumpmap = PRIM_BUMP_TILE;
            }
            if (bumpmap != -1)
            {
                llSetPrimitiveParams([PRIM_BUMP_SHINY, side, shiny, bumpmap]);
                myDialog(id, "\nPrim Properties:", Properties);
            }
        }
        else if (llListFindList(Bump_2, [message]) != -1)
        {
            if (message == "Prev Bumps")
            {
                bumpmap = -1;
                myDialog(id, "\nSet bump map to use:", Bump_1);
            }
            else if (message == "Stone")
            {
                bumpmap = PRIM_BUMP_STONE;
            }
            else if (message == "Disks")
            {
                bumpmap = PRIM_BUMP_DISKS;
            }
            else if (message == "Gravel")
            {
                bumpmap = PRIM_BUMP_GRAVEL;
            }
            else if (message == "Blobs")
            {
                bumpmap = PRIM_BUMP_BLOBS;
            }
            else if (message == "Siding")
            {
                bumpmap = PRIM_BUMP_SIDING;
            }
            else if (message == "Large Tile")
            {
                bumpmap = PRIM_BUMP_LARGETILE;
            }
            else if (message == "Stucco")
            {
                bumpmap = PRIM_BUMP_STUCCO;
            }
            else if (message == "Suction")
            {
                bumpmap = PRIM_BUMP_SUCTION;
            }
            else if (message == "Weave")
            {
                bumpmap = PRIM_BUMP_WEAVE;
            }
            if (bumpmap != -1)
            {
                llSetPrimitiveParams([PRIM_BUMP_SHINY, side, shiny, bumpmap]);
                myDialog(id, "\nPrim Properties:", Properties);
            }
        }
        else if (llListFindList(Phantom, [message]) != -1)
        {
            if (message == "Phantom ON")
            {
                llSetStatus(STATUS_PHANTOM, TRUE);
            }
            else if (message == "No Phantom")
            {
                llSetStatus(STATUS_PHANTOM, FALSE);
            }
            myDialog(id, "\nPrim Properties:", Properties);
        }
        else if (llListFindList(Force, [message]) != -1)
        {
            force = (vector)llGetSubString(message, 0,
                                          llStringLength(message) - 1);
            llSetPrimitiveParams([PRIM_FLEXIBLE, TRUE, soft, gravity,
                              friction, wind, tension, force]);
            myDialog(id, "\nSet flexible properties:", Flexible_ON);
        }
        else if (llListFindList(Friction, [message]) != -1)
        {
            friction = (float)llGetSubString(message, 0,
                                          llStringLength(message) - 3);
            llSetPrimitiveParams([PRIM_FLEXIBLE, TRUE, soft, gravity,
                              friction, wind, tension, force]);
            myDialog(id, "\nSet flexible properties:", Flexible_ON);
        }
        else if (llListFindList(Gravity, [message]) != -1)
        {
            gravity = (float)llGetSubString(message, 0,
                                          llStringLength(message) - 3);
            llSetPrimitiveParams([PRIM_FLEXIBLE, TRUE, soft, gravity,
                              friction, wind, tension, force]);
            myDialog(id, "\nSet flexible properties:", Flexible_ON);
        }
        else if (llListFindList(Hole, [message]) != -1)
        {
            params = llGetPrimitiveParams([PRIM_TYPE]);
            if (message == "Circle")
            {
                params = llListReplaceList((params = []) + params,
                           [PRIM_HOLE_CIRCLE], 1, 1);
            }
            else if (message == "Square")
            {
                params = llListReplaceList((params = []) + params,
                           [PRIM_HOLE_SQUARE], 1, 1);
            }
            else if (message == "Triangle")
            {
                params = llListReplaceList((params = []) + params,
                           [PRIM_HOLE_TRIANGLE], 1, 1);
            }
            else if (message == "Full Hole")
            {
                params = llListReplaceList((params = []) + params,
                           [0.95], 3, 3);
            }
            else if (message == "No Hole")
            {
                params = llListReplaceList((params = []) + params,
                           [0.0], 3, 3);
            }
            else
            {
                params = llListReplaceList((params = []) + params, [(float)llGetSubString(message, 0, llStringLength(message) - 8)], 3, 3);
            }
            llSetPrimitiveParams([PRIM_TYPE] + params);
            myDialog(id, "\nPrim properties:", Properties);
        }
        else if (llListFindList(Tension, [message]) != -1)
        {
            tension = (float)llGetSubString(message, 0,
                                          llStringLength(message) - 3);
            llSetPrimitiveParams([PRIM_FLEXIBLE, TRUE, soft, gravity,
                              friction, wind, tension, force]);
            myDialog(id, "\nSet flexible properties:", Flexible_ON);
        }
        else if (llListFindList(Wind, [message]) != -1)
        {
            wind = (float)llGetSubString(message, 0,
                                          llStringLength(message) - 3);
            llSetPrimitiveParams([PRIM_FLEXIBLE, TRUE, soft, gravity,
                              friction, wind, tension, force]);
            myDialog(id, "\nSet flexible properties:", Flexible_ON);
        }
        else if (llListFindList(Softness, [message]) != -1)
        {
            soft = (integer)llGetSubString(message,
                                llStringLength(message) - 1,
                                llStringLength(message) - 1);
            llSetPrimitiveParams([PRIM_FLEXIBLE, TRUE, soft, gravity,
                              friction, wind, tension, force]);
            myDialog(id, "\nSet flexible properties:", Flexible_ON);
        }
        else if (llListFindList(Flexible_ON + Flexible_OFF, [message]) != -1)
        {
            if (message == "Flexible ON")
            {
                flexible = 1;
                llSetPrimitiveParams([PRIM_FLEXIBLE, TRUE, soft, gravity,
                                  friction, wind, tension, force]);
                myDialog(id, "\nSet flexible properties:", Flexible_ON);
            }
            else if (message == "Flexible OFF")
            {
                flexible = 0;
                llSetPrimitiveParams([PRIM_FLEXIBLE, FALSE, soft, gravity,
                                  friction, wind, tension, force]);
                myDialog(id, "\nPrim Properties:", Properties);
            }
            else if (message == "Wind")
            {
                myDialog(id, "\nSet wind value:\nSelect a wind value [0.0, 10.0]", Wind);
            }
            else if (message == "Tension")
            {
                myDialog(id, "\nSet tension value:\nSelect a tension value [0.0, 10.0]", Tension);
            }
            else if (message == "Force")
            {
                myDialog(id, "\nSet force vector:", Force);
            }
            else if (message == "Softness")
            {
                myDialog(id, "Set Softness:\nSelect a softness value 0-3",
                              Softness);
            }
            else if (message == "Gravity")
            {
                myDialog(id, "\nSet gravity value:\nSelect a gravity value [-10.0, 10.0]", Gravity);
            }
            else if (message == "Friction")
            {
                myDialog(id, "\nSet friction value:\nSelect a friction value [0.0, 10.0]", Friction);
            }
        }
        else if (llListFindList(Materials, [message]) != -1)
        {
            if (message == "Glass")
            {
                llSetPrimitiveParams([PRIM_MATERIAL, PRIM_MATERIAL_GLASS]);
            }
            else if (message == "Metal")
            {
                llSetPrimitiveParams([PRIM_MATERIAL, PRIM_MATERIAL_METAL]);
            }
            else if (message == "Plastic")
            {
                llSetPrimitiveParams([PRIM_MATERIAL, PRIM_MATERIAL_PLASTIC]);
            }
            else if (message == "Wood")
            {
                llSetPrimitiveParams([PRIM_MATERIAL, PRIM_MATERIAL_WOOD]);
            }
            else if (message == "Rubber")
            {
                llSetPrimitiveParams([PRIM_MATERIAL, PRIM_MATERIAL_RUBBER]);
            }
            else if (message == "Stone")
            {
                llSetPrimitiveParams([PRIM_MATERIAL, PRIM_MATERIAL_STONE]);
            }
            else if (message == "Flesh")
            {
                llSetPrimitiveParams([PRIM_MATERIAL, PRIM_MATERIAL_FLESH]);
            }
            myDialog(id, "\nPrim Properties:", Properties);
        }
        else if (llListFindList(Colors, [message]) != -1)
        {
            if (message == "Black")
            {
                llSetColor(<0.0, 0.0, 0.0>, side);
            }
            else if (message == "White")
            {
                llSetColor(<1.0, 1.0, 1.0>, side);
            }
            else if (message == "Indigo")
            {
                llSetColor(<75, 0, 130> / 255.0, side);
            }
            else if (message == "Violet")
            {
                llSetColor(<238, 130, 238> / 255.0, side);
            }
            else if (message == "Cyan")
            {
                llSetColor(<0.0, 1.0, 1.0>, side);
            }
            else if (message == "Yellow")
            {
                llSetColor(<1.0, 1.0, 0.0>, side);
            }
            else if (message == "Purple")
            {
                llSetColor(<160, 32, 240> / 255.0, side);
            }
            else if (message == "Orange")
            {
                llSetColor(<1.0, 0.647, 0.0>, side);
            }
            else if (message == "Red")
            {
                llSetColor(<1.0, 0.0, 0.0>, side);
            }
            else if (message == "Green")
            {
                llSetColor(<0.0, 1.0, 0.0>, side);
            }
            else if (message == "Blue")
            {
                llSetColor(<0.0, 0.0, 1.0>, side);
            }
            myDialog(id, "\nPrim Properties:", Properties);
        }
        else if (llListFindList(Shape, [message]) != -1)
        {
            if (message == "Box")
            {
                llSetPrimitiveParams([PRIM_TYPE, PRIM_TYPE_BOX, 0, <0.0, 1.0, 0.0>, 0.0, <0.0, 0.0, 0.0>, <1.0, 1.0, 0.0>, <0.0, 0.0, 0.0>]);
            }
            else if (message == "Prism")
            {
            llSetPrimitiveParams([PRIM_TYPE, PRIM_TYPE_PRISM, 0, <0.0, 1.0, 0.0>, 0.0, <0.0, 0.0, 0.0>, <0.0, 0.0, 0.0>, <0.0, 0.0, 0.0>]);
            }
            else if (message == "Sphere")
            {
            llSetPrimitiveParams([PRIM_TYPE, PRIM_TYPE_SPHERE, 0, <0.0, 1.0, 0.0>, 0.0, <0.0, 0.0, 0.0>, <0.0, 1.0, 0.0>]);
            }
            else if (message == "Cylinder")
            {
            llSetPrimitiveParams([PRIM_TYPE, PRIM_TYPE_CYLINDER, 0, <0.0, 1.0, 0.0>, 0.0, <0.0, 0.0, 0.0>, <1.0, 1.0, 0.0>, <0.0, 0.0, 0.0>]);
            }
            else if (message == "Torus")
            {
            llSetPrimitiveParams([PRIM_TYPE, PRIM_TYPE_TORUS, 0, <0.0, 1.0, 0.0>, 0.0, <0.0, 0.0, 0.0>, <1.0, 0.25, 0.0>, <0.0, 0.0, 0.0>, <0.0, 1.0, 0.0>, <0.0, 0.0, 0.0>, 1.0, 0.0, 0.0]);
            }
            else if (message == "Tube")
            {
            llSetPrimitiveParams([PRIM_TYPE, PRIM_TYPE_TUBE, 0, <0.0, 1.0, 0.0>, 0.0, <0.0, 0.0, 0.0>, <1.0, 0.25, 0.0>, <0.0, 0.0, 0.0>, <0.0, 1.0, 0.0>, <0.0, 0.0, 0.0>, 1.0, 0.0, 0.0]);
            }
            else if (message == "Ring")
            {
            llSetPrimitiveParams([PRIM_TYPE, PRIM_TYPE_RING, 0, <0.0, 1.0, 0.0>, 0.0, <0.0, 0.0, 0.0>, <1.0, 0.25, 0.0>, <0.0, 0.0, 0.0>, <0.0, 1.0, 0.0>, <0.0, 0.0, 0.0>, 1.0, 0.0, 0.0]);
            }
            myDialog(id, "\nPimp Your Prim:", Main_Menu);
        }
        else if (llListFindList(Angle, [message]) != -1)
        {
            if (message == "None")
            {
                angle = 0.0;
                rotate = 0;
            }
            else
            {
                angle = (float)message;
                rotate = 1;
            }
            llRotateTexture(angle * DEG_TO_RAD, side);
            myDialog(id, "\nPimp Your Prim:", Main_Menu);
        }
        else if (llListFindList(Names_1 + Names_2 + Names_3, [message]) != -1)
        {
            if (message == "Slide Show")
            {
                myDialog(id, "\nConfigure Slide Show:\nDelay currently = " + (string)delay + "\n\nSet delay and/or slide show on/off", Slide_Show);
            }
            else if (message == "Media")
            {
              Media = llParcelMediaQuery([PARCEL_MEDIA_COMMAND_TEXTURE]);
              if ( Media == [] )
              {
                Landowner=llGetParcelDetails(llGetPos(),[PARCEL_DETAILS_OWNER]);
                if (id == llList2Key(Landowner ,0))
                {
                    llSay(0, "Lacking permission to set/query parcel media. This object has to be owned by/deeded to the land owner.");
                }
                else
                {
                    llSay(0, "You must be the parcel owner or have proper group permission to use the Parcel Media texturing capability of this object.");
                }
              }
              else
              {
                    llSetTexture((string)llList2Key(Media, 0), side);
              }
              myDialog(id, "\nPimp Your Prim:", Main_Menu);
            }
            else if (message == "Page 2")
            {
                Length = list2Length;
                Page = 2;
                myDialog(id, "\nSelect Texture (Page 2):", Names_2);
            }
            else if (message == "Page 3")
            {
                Length = list3Length;
                Page = 3;
                myDialog(id, "\nSelect Texture (Page 3):", Names_3);
            }
            else if (message == "Page 1")
            {
                Length = list1Length;
                Page = 1;
                myDialog(id, "\nSelect Texture (Page 1):", Names_1);
            }
            else 
            {
                for (i = 0; i < Length; i++)
                {
                  if (Page == 1)
                  {
                    if (message == llList2String(Names_1,i))
                    {
                      if (llList2String(Textures_1,i) != "")
                      {
                        llSetTexture(llList2String(Textures_1,i), side);
                        if (rotate == 1)
                        {
                          llRotateTexture(angle * DEG_TO_RAD, side);
                        }
                      }
                    }
                  }
                  else
                  {
                    if (message == llList2String(Names_2,i))
                    {
                      if (llList2String(Textures_2,i) != "")
                      {
                        llSetTexture(llList2String(Textures_2,i), side);
                        if (rotate == 1)
                        {
                          llRotateTexture(angle * DEG_TO_RAD, side);
                        }
                      }
                    }
                    else if (message == llList2String(Names_3,i))
                    {
                      if (llList2String(Textures_3,i) != "")
                      {
                        llSetTexture(llList2String(Textures_3,i), side);
                        if (rotate == 1)
                        {
                          llRotateTexture(angle * DEG_TO_RAD, side);
                        }
                      }
                    }
                  }
                }
                myDialog(id, "\nPimp Your Prim:", Main_Menu);
            }
        }
        else
        {
          llSay(0,name + " chose invalid option '" + message + "'.");
        }
    }
    timer()
    {
        if (delay)
        {
            if (!(counter % delay))
            {
                showSlide();
            }
            if (!(counter % 3600))
            {
                llListenRemove(handle);
                llWhisper(0, "Dialog timed out. Touch again to restart.");
            }
            counter += delay;
            if (counter > 3600)
                counter = delay;
        }
        else
        {
            llListenRemove(handle);
            llWhisper(0, "Dialog timed out. Touch again to restart.");
            llSetTimerEvent(0.0);
        }
    }
}

