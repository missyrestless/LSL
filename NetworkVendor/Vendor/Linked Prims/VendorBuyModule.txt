//----------------------------------------------------------------------------//
//Copyright Info Below... Please Do not Remove                                //
//----------------------------------------------------------------------------//

//(c)2007 Ilobmirt Tenk
//(c)2011 Missy Restless

//This file is part of the Restless Studio Vendor Project

//    Restless Studio Vendor is free software; you can redistribute it and/or
//    modify it under the terms of the GNU General Public License as published
//    by the Free Software Foundation; either version 3 of the License, or
//    (at your option) any later version.

//    Restless Studio Vendor is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.

//----------------------------------------------------------------------------//
//Copyright Info Above... Please Do not Remove                                //
//----------------------------------------------------------------------------//
// modified by Fleur Dollinger 6 April 2008 - enable income splitting
// modified by Fleur Dollinger 28 April 2008 - option to disable deed to group

//=================================================================//
//List all the global variables here...
//=================================================================//

integer intCurrentPrice = 0;

integer intListenChannel = 40;

//count of the current Notecard line to read
integer intSettingLines = 0;

//key of the notecard line to be read
key keySettingsId;

//determines if this object displays debugging output
integer blnDebug = FALSE;

//income can be split between up to 3 avatars (as well as owner)
//make split=1 and set splits & keys in notecard
integer split = FALSE;

key split1 = NULL_KEY; 
key split2 = NULL_KEY;
key split3 = NULL_KEY;

integer split1flat;
integer split2flat;
integer split3flat; 

float split1amount;
float split2amount;
float split3amount;

//DEFAULT IS TO DISABLE DEED TO GROUP
integer deedToGroup = 0;
//get the object's group - NULL_KEY 
list groupD;

//This displays messages to the owner if debug mode has been set to true
debugMessage(string strMessage){
    if(blnDebug == TRUE){
        llOwnerSay("VendorBuy:    " + strMessage);
    }
}

splitMoney(integer amount)
{
    if (split1 != NULL_KEY && split1 != llGetOwner() && split1 != "")
    {
        if (split1flat == TRUE)
        {
            if (amount > split1amount)
            {
                llGiveMoney(split1, (integer) split1amount);
            }
        } else
        {
            if ((integer) (split1amount*amount/100) >= 1)
            {
                llGiveMoney(split1,(integer) (amount*split1amount/100));
            } else
            {
                //modified to pass on single $1 amounts to Fleur
                if (amount == 1)
                llGiveMoney(split1,1);
            }
        }
    }

    if (split2 != NULL_KEY && split2 != llGetOwner() && split2 != "")
    {
        if (split2flat == TRUE)
        {
            if (amount > split2amount)
            {
                llGiveMoney(split2, (integer) split2amount);
            }
        } else
        {
            if ((integer) (split2amount*amount/100) >= 1)
            {
                llGiveMoney(split2,(integer) (amount*split2amount/100));
            }
        }
    }

    if (split3 != NULL_KEY && split3 != llGetOwner() && split3 != "")
    {
        if (split3flat == TRUE)
        {
            if (amount > split3amount)
            {
                llGiveMoney(split3, (integer) split3amount);
            }
        } else
        {
            if ((integer) (split1amount*amount/100) >= 1)
            {
                llGiveMoney(split3,(integer) (amount*split3amount/100));
            }
        }
    }
}

//In this state, vendor must accept debit permissions before using the vendor
default
{
    state_entry()
    {
        groupD = llGetObjectDetails(llGetOwner(), [OBJECT_GROUP]);
        debugMessage("GroupD:" + (string) llList2String(groupD,0));

        //request permission on startup
        if ((deedToGroup == 0 && (key) llList2String(groupD,0) == NULL_KEY) ||
             deedToGroup == 1)
        {
            //Asks store owner for the ability to sell things.
            llRequestPermissions(llGetOwner(),PERMISSION_DEBIT);
        }
        else
        {
            llWhisper(0,"Deeding this vendor to a group is not permitted. Transaction permission has been revoked.  I hope you didn't really want to steal $$ from the creator of these products.");
        }
    }
    
    on_rez(integer start_param)
    {
        //reset script upon rezz
        llResetScript();
    }



    listen( integer channel, string name, key id, string message ){
        if(id == llGetOwner()){
            //Enable or disable verbose output
            if(message == "debug"){
                blnDebug = !blnDebug;
                llOwnerSay("VendorBuy:   Debug Mode set to: " +
                           (string) blnDebug);
                llMessageLinked(LINK_SET,0,"debugMode#" +
                                           (string) blnDebug,NULL_KEY);
            }
        }
    }


    link_message(integer sender_number, integer number, string message, key id)
    {
        //Separate the linked message into the function and variables
        list lstMessage = llParseString2List(message,["#"],[]);
        string strFunction = llList2String(lstMessage,0);

        if(message == "goingOnline"){
            //prevent vendor from staying online untill permissions are granted
            //Tell Vendor to go offline if not already
            llMessageLinked(LINK_SET,0,"goOffline",NULL_KEY);
        }
        //debugMode#blnEnabled
        else if(strFunction == "debugMode"){
            blnDebug = (integer) llList2String(lstMessage,1);
        }
    }

    //Depending on if avatar accepts or declines request,
    //either stay in this state, or move on...
    run_time_permissions(integer permissions)
    {
        //if user accepted debit permissions
        if(permissions & PERMISSION_DEBIT){
            //Tell Vendor to go online if not already
            llMessageLinked(LINK_SET,0,"goOnline",NULL_KEY);
            //Change state to allow for transactions
            state transactionsAcceptable;
        }
        else if(!(permissions & PERMISSION_DEBIT)){
            llOwnerSay("Sorry, but this vendor requires its owner to allow for debit permissions.");
            llOwnerSay("To enable vendor service, touch the containing prim of the payment script, and accept the debit request.");
        }
    }

    touch(integer total_number)
    {
        if ((deedToGroup == 0 && (key) llList2String(groupD,0) == NULL_KEY) ||
             deedToGroup == 1)
        {       
            //Asks store owner for the ability to sell things.
            llRequestPermissions(llGetOwner(),PERMISSION_DEBIT);
        } else
        {
            llWhisper(0,"Transaction permission has been denied/revoked for this vendor.");
        }
    }
}

//In this state, vendor has accepted debit permissions
//Allow transactions to commence
state transactionsAcceptable
{
    state_entry(){
        llOwnerSay("Vendor is now able to make transactions with this script.");
        //Obtain the first line of the vendor link settings;
        keySettingsId = llGetNotecardLine("BUY_SETTINGS", intSettingLines); 
    }
    
    changed( integer vBitChanges ){
        //Detect change of owner on the ground, as this may indicate that the
        //owner has deeded this object to the group, in which case we may want
        //to disable transactions. If any kind of split is activated you will
        //have to disallow deeding this vendor to the group as groups cannot
        //'pay' other ppl out of the split. This is really only relevant if you
        // are giving this vendor to other people to sell your products for you.
        if (vBitChanges & CHANGED_OWNER){
            llResetScript();
        }
    }

    on_rez(integer start_param){
        llResetScript();
    }

    //Set the current price to the value of num.
    //This is incase that the user over/under pays for the item
    link_message(integer sender_num, integer num, string str, key id){
        if(str == "updatePrice"){
            intCurrentPrice = num;
        }
    }

    //Whenever an avatar pays an object that this script is in,
    //check for correct amount.
    //Then if correct amount is payed, notify the system of a sale
    money(key giver, integer amount) {
        // has the user paid the correct amount?
        if (amount == intCurrentPrice)
        {
            // if so, thank the payer by name.
            llSay(0,"Thank you, " + llKey2Name(giver) + ".");
            //give them the lovely object displayed on the vendor
            
            //send message back to root object to give out product
            llMessageLinked(LINK_ROOT,0,"itemBought#" + (string)giver,NULL_KEY);
            
            // if settings card includes split details 
            if (split == TRUE)
            {
                 splitMoney (amount);
            }
        }
        
        // is the amount paid less than it needs to be?
        else if (amount < intCurrentPrice)
        {
            // Tell them they're getting a refund, then refund their money.
            llSay(0,"You didn't pay enough, " + llKey2Name(giver) +
                    ". Refunding your payment of L$" + (string)amount + ".");
            llGiveMoney(giver, amount); // refund amount paid.
        }
        
        // if it's not exactly the amount required,
        // and it's not less than the amount required,
        // the payer has paid too much.
        else
        {
            // tell them they've overpaid.
            // determine how much extra they've paid.
            integer intRefund = amount - intCurrentPrice;
            llSay(0,"You paid too much, " + llKey2Name(giver) +
                    ". Your change is L$" + (string)intRefund + ".");
            llGiveMoney(giver, intRefund); // refund their change.
            //give them the lovely object displayed on the vendor

            //send message back to root object to give out product.
            llMessageLinked(LINK_ROOT,0,"itemBought#" + (string)giver,NULL_KEY);
        }
    }
    
    //Read the link settings notecard. Configure the link based on each line.
    dataserver(key query_id, string data) {
        if (query_id == keySettingsId) {
            if (data != EOF) {    // not at the end of the notecard
                debugMessage("Notecard Line = \"" + data + "\"");
                //split the record into variable names and values
                list lstSplit = llParseString2List(data,["="],[]);
                string strVariable = llToUpper(llStringTrim(llList2String(lstSplit,0),STRING_TRIM));
                string strValue = llStringTrim(llList2String(lstSplit,1),STRING_TRIM);
                // get setting for deedToGroup (default is 0 = disable)
                if(strVariable == "DEEDTOGROUP"){
                    deedToGroup = (integer) strValue;
                    debugMessage("deedToGroup = " + (string) split);
                }

                // get settings for splits
                if(strVariable == "SPLIT"){
                    split = (integer) strValue;
                    debugMessage("SPLIT = " + (string) split);
                }
                if(strVariable == "SPLIT 1 KEY"){
                    split1 = (key) strValue;
                    debugMessage("split1 = " + (string) split1);
                }
                if(strVariable == "SPLIT 2 KEY"){
                    split2 = (key) strValue;
                    debugMessage("split2 = " + (string) split2);
                }
                if(strVariable == "SPLIT 3 KEY"){
                    split3 = (key) strValue;
                    debugMessage("split3 = " + (string) split3);
                }
                if(strVariable == "SPLIT 1 FLAT"){
                    split1flat = (integer) strValue;
                    debugMessage("split1flat = " + (string) split1flat);
                }
                if(strVariable == "SPLIT 2 FLAT"){
                    split2flat = (integer) strValue;
                    debugMessage("split2flat = " + (string) split2flat);
                }
                if(strVariable == "SPLIT 3 FLAT"){
                    split3flat = (integer) strValue;
                    debugMessage("split3flat = " + (string) split3flat);
                }
                if(strVariable == "SPLIT 1 AMOUNT"){
                    split1amount = (float) strValue;
                    debugMessage("split1amount = " + (string) split1amount);
                }
                if(strVariable == "SPLIT 2 AMOUNT"){
                    split2amount = (float) strValue;
                    debugMessage("split2Amount = " + (string) split2amount);
                }
                if(strVariable == "SPLIT 3 AMOUNT"){
                    split3amount = (float) strValue;
                    debugMessage("split3amount = " + (string) split3amount);
                }
                if(strVariable == "CHANNEL"){
                    intListenChannel = (integer) strValue;
                    debugMessage("intListenChannel = " +
                                 (string) intListenChannel);
                }

                // request next line
                keySettingsId = llGetNotecardLine("BUY_SETTINGS",
                                                  ++intSettingLines);
            }
            else{
            }
        }
        //Capture toggle of Debug Setings
        llListen(intListenChannel,"",llGetOwner(),"debug");
    }
}

